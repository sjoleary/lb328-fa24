theme_classic() +
theme(legend.position = "bottom")
aug <- monthly %>%
filter(month == "Aug")
ggplot(aug, aes(x = year, y = mean_monthly)) +
stat_smooth(method = "lm") +
geom_point() +
labs(x = "month", y = "mean discharge for August") +
theme_classic() +
theme(legend.position = "bottom")
lm(mean_monthly ~ year, data = feb) %>%
summary()
lm(mean_monthly ~ year, data = aug) %>%
summary()
# Chunk 1: set-up
#| label: set-up
#| include: false
# set options
knitr::opts_chunk$set(tidy = FALSE)
options(htmltools.dir.version = FALSE)
# Chunk 2
# read libraries
library(readr)
library(janitor)
library(lubridate)
library(tidyr)
library(dplyr)
library(ggplot2)
library(patchwork)
library(plotly)
library(knitr)
# read data set
discharge <- read_delim("data/piscat_365.txt",
skip = 27,
delim = "\t",
col_names = c("agency", "site_no", "date", "discharge_cfs", "flag"))
# check data
head(discharge) %>%
kable()
# Chunk 3
ggplot(discharge, aes(x = date, y = discharge_cfs)) +
geom_line() +
geom_point() +
labs(x = "Date", y = "Daily Mean Discarge (cubic feet per second)") +
theme_classic()
# Chunk 4
# read data
precip <- read_delim("data/man_precipitation.csv",
delim = ",") %>%
clean_names()
# check data
head(precip) %>%
kable()
# Chunk 5
ggplot(precip, aes(x = date, y = prcp)) +
geom_bar(stat = "identity", color = "darkblue") +
labs(x = "date", y = "daily total precipitation") +
theme_classic()
# Chunk 6
p1 <- ggplot(precip, aes(x = date, y = prcp)) +
geom_bar(stat = "identity", color = "darkblue") +
labs(x = "", y = "daily total precipitation") +
theme_classic()
p2 <- ggplot(discharge, aes(x = date, y = discharge_cfs)) +
geom_line() +
geom_point() +
labs(x = "Date", y = "daily mean discarge [cfs]") +
theme_classic()
# combine figures under each other
p1 / p2
rab <- read_delim("data/RAB_water-level.tsv", delim = "\t") %>% # read data set
mutate(date = as_date(date_time)) %>%                         # extract date
group_by(date) %>%                                            # group by date
summarize(mean_daily_level_cm = mean(water_level_cm)) %>%     # calculate daily mean
mutate(yday = yday(date),                                     # determine day of year
year = as.character(year(date)))                       # make year qualitative
ggplot(rab, aes(x = yday, y = mean_daily_level_cm, color = year)) +
geom_line() +
geom_point(size = 0.5) +
scale_color_manual(values = c("#3E2F5B", "#136F63", "#E0CA3C", "#F34213")) +
labs(x = "day of the year", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
ggplot(rab, aes(x = yday, y = mean_daily_level_cm)) +
geom_line(color = "#136F63") +
geom_point(size = 0.5, color = "#136F63") +
facet_grid(. ~ year) +
labs(x = "date", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
ggplot(rab, aes(x = date, y = mean_daily_level_cm)) +
geom_line(color = "#136F63") +
geom_point(size = 0.5, color = "#136F63") +
labs(x = "date", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
ggplot(rab, aes(x = yday, y = mean_daily_level_cm, color = year)) +
geom_line() +
geom_point(size = 0.5) +
scale_color_manual(values = c("#3E2F5B", "#136F63", "#E0CA3C", "#F34213")) +
labs(x = "day of the year", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
ggplot(rab, aes(x = yday, y = mean_daily_level_cm)) +
geom_line(color = "#136F63") +
geom_point(size = 0.5, color = "#136F63") +
facet_grid(. ~ year) +
labs(x = "date", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
ggplot(rab, aes(x = date, y = mean_daily_level_cm)) +
geom_line(color = "#136F63") +
geom_point(size = 0.5, color = "#136F63") +
labs(x = "date", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
rab <- ggplot(rab, aes(x = date, y = mean_daily_level_cm)) +
geom_line(color = "#136F63") +
geom_point(size = 0.5, color = "#136F63") +
labs(x = "date", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
rab_plot <- ggplot(rab, aes(x = date, y = mean_daily_level_cm)) +
geom_line(color = "#136F63") +
geom_point(size = 0.5, color = "#136F63") +
labs(x = "date", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
# Chunk 1: set-up
#| label: set-up
#| include: false
# set options
knitr::opts_chunk$set(tidy = FALSE)
options(htmltools.dir.version = FALSE)
# Chunk 2
# read libraries
library(readr)
library(janitor)
library(lubridate)
library(tidyr)
library(dplyr)
library(ggplot2)
library(patchwork)
library(plotly)
library(knitr)
# read data set
discharge <- read_delim("data/piscat_365.txt",
skip = 27,
delim = "\t",
col_names = c("agency", "site_no", "date", "discharge_cfs", "flag"))
# check data
head(discharge) %>%
kable()
# Chunk 3
ggplot(discharge, aes(x = date, y = discharge_cfs)) +
geom_line() +
geom_point() +
labs(x = "Date", y = "Daily Mean Discarge (cubic feet per second)") +
theme_classic()
# Chunk 4
# read data
precip <- read_delim("data/man_precipitation.csv",
delim = ",") %>%
clean_names()
# check data
head(precip) %>%
kable()
# Chunk 5
ggplot(precip, aes(x = date, y = prcp)) +
geom_bar(stat = "identity", color = "darkblue") +
labs(x = "date", y = "daily total precipitation") +
theme_classic()
# Chunk 6
p1 <- ggplot(precip, aes(x = date, y = prcp)) +
geom_bar(stat = "identity", color = "darkblue") +
labs(x = "", y = "daily total precipitation") +
theme_classic()
p2 <- ggplot(discharge, aes(x = date, y = discharge_cfs)) +
geom_line() +
geom_point() +
labs(x = "Date", y = "daily mean discarge [cfs]") +
theme_classic()
# combine figures under each other
p1 / p2
# Chunk 7
rab <- read_delim("data/RAB_water-level.tsv", delim = "\t") %>% # read data set
mutate(date = as_date(date_time)) %>%                         # extract date
group_by(date) %>%                                            # group by date
summarize(mean_daily_level_cm = mean(water_level_cm)) %>%     # calculate daily mean
mutate(yday = yday(date),                                     # determine day of year
year = as.character(year(date)))                       # make year qualitative
# Chunk 8
ggplot(rab, aes(x = yday, y = mean_daily_level_cm, color = year)) +
geom_line() +
geom_point(size = 0.5) +
scale_color_manual(values = c("#3E2F5B", "#136F63", "#E0CA3C", "#F34213")) +
labs(x = "day of the year", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
# Chunk 9
ggplot(rab, aes(x = yday, y = mean_daily_level_cm)) +
geom_line(color = "#136F63") +
geom_point(size = 0.5, color = "#136F63") +
facet_grid(. ~ year) +
labs(x = "date", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
rab_plot <- ggplot(rab, aes(x = date, y = mean_daily_level_cm)) +
geom_line(color = "#136F63") +
geom_point(size = 0.5, color = "#136F63") +
labs(x = "date", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
rab_plot
rab <- read_delim("data/WHB_water-level.tsv", delim = "\t") %>% # read data set
mutate(date = as_date(date_time)) %>%                         # extract date
group_by(date) %>%                                            # group by date
summarize(mean_daily_level_cm = mean(water_level_cm)) %>%     # calculate daily mean
mutate(yday = yday(date),                                     # determine day of year
year = as.character(year(date)))                       # make year qualitative
whb <- read_delim("data/WHB_water-level.tsv", delim = "\t") %>% # read data set
mutate(date = as_date(date_time)) %>%                         # extract date
group_by(date) %>%                                            # group by date
summarize(mean_daily_level_cm = mean(water_level_cm)) %>%     # calculate daily mean
mutate(yday = yday(date),                                     # determine day of year
year = as.character(year(date)))                       # make year qualitative
ggplot(rab, aes(x = yday, y = mean_daily_level_cm, color = year)) +
geom_line() +
geom_point(size = 0.5) +
scale_color_manual(values = c("#3E2F5B", "#136F63", "#E0CA3C", "#F34213")) +
labs(x = "day of the year", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
ggplot(whb, aes(x = date, y = mean_daily_level_cm)) +
geom_line(color = "#136F63") +
geom_point(size = 0.5, color = "#136F63") +
labs(x = "date", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
whb_plot <- ggplot(rab, aes(x = date, y = mean_daily_level_cm)) +
geom_line(color = "#136F63") +
geom_point(size = 0.5, color = "#136F63") +
labs(title = "whiting",
x = "date", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
whb <- read_delim("data/BRB_water-level.tsv", delim = "\t") %>% # read data set
mutate(date = as_date(date_time)) %>%                         # extract date
group_by(date) %>%                                            # group by date
summarize(mean_daily_level_cm = mean(water_level_cm)) %>%     # calculate daily mean
mutate(yday = yday(date),                                     # determine day of year
year = as.character(year(date)))                       # make year qualitative
brb <- read_delim("data/BRB_water-level.tsv", delim = "\t") %>% # read data set
mutate(date = as_date(date_time)) %>%                         # extract date
group_by(date) %>%                                            # group by date
summarize(mean_daily_level_cm = mean(water_level_cm)) %>%     # calculate daily mean
mutate(yday = yday(date),                                     # determine day of year
year = as.character(year(date)))                       # make year qualitative
ggplot(whb, aes(x = yday, y = mean_daily_level_cm, color = year)) +
geom_line() +
geom_point(size = 0.5) +
scale_color_manual(values = c("#3E2F5B", "#136F63", "#E0CA3C", "#F34213")) +
labs(x = "day of the year", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
sch <- read_delim("data/SHB_water-level.tsv", delim = "\t") %>% # read data set
mutate(date = as_date(date_time)) %>%                         # extract date
group_by(date) %>%                                            # group by date
summarize(mean_daily_level_cm = mean(water_level_cm)) %>%     # calculate daily mean
mutate(yday = yday(date),                                     # determine day of year
year = as.character(year(date)))                       # make year qualitative
precip_2021 <- read_delim("data/precipitat_2021-2024.csv", delim = ",") %>%
clean_names()
ggplot(precip_2021, aes(x = date, y = prcp)) +
geom_bar(stat = "identity", color = "#3E2F5B", fill = "#3E2F5B") +
labs(x = "date", y = "mean daily precipitation") +
theme_classic()
rab <- read_delim("data/RAB_water-level.tsv", delim = "\t") %>% # read data set
mutate(date = as_date(date_time)) %>%                         # extract date
group_by(date) %>%                                            # group by date
summarize(mean_daily_level_cm = mean(water_level_cm)) %>%     # calculate daily mean
mutate(yday = yday(date),                                     # determine day of year
year = as.character(year(date)))                       # make year qualitative
ggplot(rab, aes(x = yday, y = mean_daily_level_cm, color = year)) +
geom_line() +
geom_point(size = 0.5) +
scale_color_manual(values = c("#3E2F5B", "#136F63", "#E0CA3C", "#F34213")) +
labs(x = "day of the year", y = "daily mean water level [cm]") +
theme_classic() +
theme(legend.position = "bottom")
# read libraries
library(readr)
library(janitor)
library(lubridate)
library(tidyr)
library(dplyr)
library(ggplot2)
library(patchwork)
library(knitr)
wadeable <- read_delim("data/epa_water-chemistry_wadeable-streams.txt",
delim = "\t") %>%
clean_names()
View(wadeable)
nitrogen <- wadeable %>%
group_by(EPAREGION) %>%
summarize(mean_N = mean(ntl),
median_N = median(ntl),
sd_N = sd(ntl))
head(wadeable)
nitrogen <- wadeable %>%
group_by(eparegion) %>%
summarize(mean_N = mean(ntl),
median_N = median(ntl),
sd_N = sd(ntl))
nitrogen
kable(
nitrogen
)
kable(
nitrogen,
digits = 2
)
ggplot(wadeable, aes(x = eparegion, y = ntl)) +
geom_boxplot()
ggplot(wadeable, aes(x = eparegion, y = ntl)) +
geom_boxplot() +
scale_y_log10
ggplot(wadeable, aes(x = eparegion, y = ntl)) +
geom_boxplot() +
scale_y_log10()
ggplot(wadeable, aes(x = eparegion, y = ntl)) +
geom_boxplot() +
scale_y_log10() +
theme_classic()
nutrients <- wadeable %>%
mutate(log_N = log10(ntl),
log_P = log10(ptl))
head(nutrients)
View(nutrients)
ggplot(wadeable, aes(x = eparegion, y = ntl)) +
geom_boxplot() +
scale_y_log10() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
View(nutrients)
colnames(nutrients)
# Nitrogen
ggplot(nutrients, aes(x = log_N, y = mmi_wsabest)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Nitrogen
ggplot(nutrients, aes(x = log_N, y = mmi_wsabest)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
rivers <- read_delim("data/epa_water-chemistry_streams-rivers_2019.csv",
delim = ",")
View(rivers)
colnams(rivers)
colnames(rivers)
# column names
colnames(rivers)
headwaters <- read_delim("data/environmental-data.tsv",
delim = "\t") +
clean_names()
headwaters <- read_delim("data/environmental-param.tsv",
delim = "\t") +
clean_names()
headwaters <- read_delim("data/environmental-param.tsv",
delim = "\t") %>%
clean_names()
View(headwaters)
# check data
head(headwaters)
headwaters %>%
group_by(stream_name) %>%
summarize(mean_TDS = mean(tds_ppm, na.rm = TRUE),
sd_TDS = sd(tds_ppm, na.rm = TRUE)) %>%
kable(digits = 2)
headwaters %>%
group_by(stream_name) %>%
summarize(mean_TDS = mean(tds_ppm, na.rm = TRUE),
sd_TDS = sd(tds_ppm, na.rm = TRUE)) %>%
arrange(desc) %>%
kable(digits = 2)
headwaters %>%
group_by(stream_name) %>%
summarize(mean_TDS = mean(tds_ppm, na.rm = TRUE),
sd_TDS = sd(tds_ppm, na.rm = TRUE)) %>%
arrange(desc(mean_TDS)) %>%
kable(digits = 2)
ggplot(headwaters, aes(x = stream_name, y = tds_ppm)) +
geom_boxplot(outlier.shape = NULL)
ggplot(headwaters, aes(x = stream_name, y = tds_ppm)) +
geom_boxplot(outlier.shape = NULL) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(headwaters, aes(x = stream_name, y = tds_ppm)) +
geom_boxplot(outlier.shape = NULL) +
geom_jitter() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# read libraries
library(readr)
library(janitor)
library(lubridate)
library(tidyr)
library(dplyr)
library(ggplot2)
library(patchwork)
library(knitr)
wadeable <- read_delim("data/epa_water-chemistry_wadeable-streams.txt",
delim = "\t") %>%
clean_names()
head(wadeable) %>%
kable()
nitrogen <- wadeable %>%
group_by(eparegion) %>%
summarize(mean_N = mean(ntl),
median_N = median(ntl),
sd_N = sd(ntl))
kable(
nitrogen,
digits = 2
)
ggplot(wadeable, aes(x = eparegion, y = ntl)) +
geom_boxplot() +
scale_y_log10() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
nutrients <- wadeable %>%
mutate(log_N = log10(ntl),
log_P = log10(ptl))
# Nitrogen
ggplot(nutrients, aes(x = log_N, y = mmi_wsabest)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
theme_presentation <- theme_classic() +
theme(
axis.text = element_text(size = 20, color = "white"),
axis.title = element_text(size = 24, color = "white"),
axis.title.y = element_text(vjust = 1.5),
axis.line.x = element_line(colour = 'white', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'white', size=0.5, linetype='solid'),
axis.ticks.x = element_line(colour = 'white', size=0.5, linetype='solid'),
axis.ticks.y = element_line(colour = 'white', size=0.5, linetype='solid'),
legend.position = "bottom",
legend.background = element_rect(fill = "transparent"),
legend.text = element_text(size = 22, color = "white"),
plot.background = element_rect(fill = "transparent", color = NA),
legend.box.background = element_rect(fill='transparent', color = "transparent"),
legend.title = element_text(size = 20, color = "white"),
panel.background = element_rect(fill = "transparent", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "transparent", color = "white"),
strip.text.x = element_text(size = 18, color = "white"),
strip.text.y = element_text(size = 18, color = "white"))
nitrogen <- wadeable %>%
group_by(eparegion) %>%
summarize(mean_N = mean(ntl),
median_N = median(ntl),
sd_N = sd(ntl))
ggplot(wadeable, aes(x = eparegion, y = ntl)) +
geom_boxplot() +
scale_y_log10() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(wadeable, aes(x = eparegion, y = ntl)) +
geom_boxplot() +
scale_y_log10() +
theme_presentation() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
theme_presentation <- theme_classic() +
theme(
axis.text = element_text(size = 20, color = "white"),
axis.title = element_text(size = 24, color = "white"),
axis.title.y = element_text(vjust = 1.5),
axis.line.x = element_line(colour = 'white', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'white', size=0.5, linetype='solid'),
axis.ticks.x = element_line(colour = 'white', size=0.5, linetype='solid'),
axis.ticks.y = element_line(colour = 'white', size=0.5, linetype='solid'),
legend.position = "bottom",
legend.background = element_rect(fill = "transparent"),
legend.text = element_text(size = 22, color = "white"),
plot.background = element_rect(fill = "transparent", color = NA),
legend.box.background = element_rect(fill='transparent', color = "transparent"),
legend.title = element_text(size = 20, color = "white"),
panel.background = element_rect(fill = "transparent", color = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "transparent", color = "white"),
strip.text.x = element_text(size = 18, color = "white"),
strip.text.y = element_text(size = 18, color = "white"))
ggplot(wadeable, aes(x = eparegion, y = ntl)) +
geom_boxplot() +
scale_y_log10() +
theme_presentation() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(wadeable, aes(x = eparegion, y = ntl)) +
geom_boxplot() +
scale_y_log10() +
theme_presentation +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(wadeable, aes(x = eparegion, y = ntl)) +
geom_boxplot(color = "white") +
scale_y_log10() +
theme_presentation +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
