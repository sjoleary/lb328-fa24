---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Evaluating qPCR assays

## Environmental DNA sampling and processing


::: {.callout-tip title="Consider this"}

Give a brief overview of the steps required to detect brook trout using environmental DNA.

:::

::: {.callout-note title="Answer" collapse="true"}

Here are the key steps:

* Collect water samples.
* Filter water samples.
* Extract DNA from water samples.
* Run a quantitative PCR assay using a fluorescent-tagged PCR probe.

:::

Now that we have run our samples we need to convert the raw data collected from the qPCR machine to determine in which samples brook trout eDNA was detected.

## Data Acquisition

```{r}

# read libraries
library(readr)
library(janitor)
library(lubridate)
library(tidyr)
library(dplyr)
library(glue)
library(ggplot2)
library(patchwork)
library(knitr)

```

Once the run is complete, export the generated data as an excel file. It will consist of 5 spreadsheets, export each of these as it's own tab-delimited file and place in the `data` folder of your `Rproject. You can download these files from our [shared google folder here](https://drive.google.com/drive/folders/16XJHELFL5EnQRO_OZhz8z1gqdhJlgxtF?usp=drive_link).

Let's read in our files

`Sample Setup`: This spreadsheet describes how you set up the plate and indicates which wells contain which standards, unknown samples, negative controls, or are empty (`TASK` column). It also indicates the `Reporter` and `Quencher` used for the probe and for the standards the known `Quantity`.

There are three types of samples

* Standards
* Unknowns
* no template controls (NTC)^[We used nuclease free water.]

This the only data sheet that links well numbers to sample names for unknowns, concentrations for the standards and links the "task" to each well.

```{r}

setup <- read_delim("data/qPCR_brk_2024-11-08_samples.csv", delim = ",", skip = 7) %>%
  clean_names() %>%
  select(well, sample_name, target_name, task, quantity) %>%
  filter(!is.na(task))

```

`Raw Data`: This spreadsheet contains the amount of fluorescent detected for each color filter (blue, green, yellow, red) for each well and cycle. This is your most raw data that is used to identify the reporter (generally FAM). We won't use this for any calculations, instead we will use the file called 
`Multicomponent Data`: This is the amount of fluorescence detected for each reporter based on `Raw Data` for each cycle and well.

```{r}

FAM <- read_delim("data/qPCR_brk_2024-11-08_multicomponent.csv", skip = 7, delim = ",") %>%
  clean_names() %>%
  filter(!is.na(fam)) %>%
  left_join(setup)

```

Finally, `Amplification Data`: This data sheet reports the normalized dye fluorescence for each cycle and well. `ΔRn` is the magnitude of normalized fluorescence signal generated by the reporter for each cycle. `Rn` is the fluorescence signal normalized to the fluorescence signal for the passive reference.

```{r}

Rn <- read_delim("data/qPCR_brk_2024-11-08_amplification.csv", delim = ",", skip = 7) %>%
  clean_names() %>%
  rename(delta_rn = rn_2) %>%
  filter(!is.na(target_name)) %>%
    select(-target_name) %>%
  left_join(setup)

```

`Results`: This spreadsheet contains the Ct results of the run. Ct^[C = Cycle, t = threshold] is the PCR cycle number at which the fluorescence meets the threshold of the amplification plot.

```{r}

# extract threshold of detection
threshold <- read_delim("data/qPCR_brk_2024-11-08_results.csv", skip = 7, delim = ",") %>%
  clean_names() %>%
  select(ct_threshold) %>%
  slice_max(ct_threshold, n = 1, with_ties = FALSE) %>%
  pull()

# extract baseline cycle values
baseline <- read_delim("data/qPCR_brk_2024-11-08_results.csv", skip = 7, delim = ",") %>%
  clean_names() %>%
  filter(!is.na(target_name)) %>%
  select(well, baseline_start, baseline_end) %>%
  left_join(setup)

# Cycle threshold values
Ct <- read_delim("data/qPCR_brk_2024-11-08_results.csv", skip = 7, delim = ",") %>%  
  clean_names() %>%                                             
  select(well, c) %>% 
  mutate(c = as.numeric(c)) %>%
  filter(!is.na(c)) %>%           
  left_join(setup)  

```


## Data Processing

During a qPCR the accumulated target DNA is detected as fluorescence as the probe binds to the specific targeted region as the reaction progresses from cycle to cycle. The qPCR measures fluorescence and processes the data into several inputs to quantify the amount of the target DNA in each sample.

* The fluorescence is measured as **R** (raw fluorescence) or **Rn** (normalized fluorescence) which is determined by dividing the fluorescence of the reporter dye and the passive reference dye.
* The **cycle threshold Ct** is the intersection between the amplification curve and the **threshold** line as a relative measure of the concentration of the target in the reaction.
* The **baseline** is the level of signal during the first approx. 5-15 cycles. In this stage there is little change in fluorescence. This signal is used to establish the detected level of background signal (fluorescent noise), this is due to e.g. light leaking into the sample well or the plastic ware. The background noise should be very low compared to the amplified signal of the target sequence. The qPCR machine software determines the baseline as a constant/linear component and removes it from the results.
* The **threshold** is the determined as the point at which there is a significant increase of fluorescence above the baseline. It should be set sufficiently high above the baseline to be confident about the amplification level. Setting it too high (in the plateau region of the curve) will lead to inaccuracies.

::: {.callout-tip title="Give it a try"}

Sketch out on a piece of paper how you expect the fluorescence to change for our three standards with different concentrations, for our negative control, and what a sample should look like if brook trout eDNA is present and if none is detected.

Discuss with your group whether you think we can determine if brook trout are absent in any of our samples.

:::

Let's take a look at the change in fluorescence for all of our wells to make sure that we have a stable increase in the signal and no abrupt changes or dips. The reference dye (`rox`) should not be affected by the target sequence being amplified while the reporter dye from the probe should show exponential increase.

```{r}
#| label: fig-fam
#| fig-cap: "Comparison of change in raw fluorescence for reporter dye (fam) and reference dye (rox) across qPCR cycles."

FAM %>%
  pivot_longer(names_to = "dye", values_to = "fluorescence", 3:4) %>%
  ggplot(aes(x = cycle, y = fluorescence, color = well)) +
    geom_line() +
    facet_grid(target_name ~ dye) +
    scale_y_log10() +
    theme_classic() +
    theme(legend.position = "blank")

```

This raw data is use to first determine `ΔRn` which is the magnitude of normalized fluorescence signal generated by the reporter integrated into the probe for each cycle. It is the normalized to the fluorescence signal for the passive reference as `Rn`.

The StepOne software that runs the qPCR machine automatically calculates baseline (start and end cycle) and threshold levels assuming that the data exhibits a typical amplification plot with four distinct sections

1. Plateau phase
2. Linear phase as plateau is approached
3. Exponential (geometric) phase characterize by sudden steep increase in fluorescence
4. Baseline (early cycles)

The end cycle of the baseline should be set a few cycles before the cycle number where significant fluorescent signal is detected, i.e. before the actual amplification curve begins. We pulled information for baseline cycles and threshold level from the results file when we read it in earlier. This means that we can plot our amplification data. And compare those relationships.


```{r}
#| label: fig-Rn
#| fig-cap: "Comparison of levels of normalized fluorescence (Rn) across all qPCR cycles. The red dotted line indicates the threshold and the blue dotted lines indicate the minimum and maximum start and end point for cycles used to determine the baseline (level of background noise)."

p1 <- ggplot(Rn, aes(x = cycle, y = delta_rn, color = well)) +
  geom_line() +
  geom_hline(yintercept = threshold, linetype = "dotted", color = "red") + 
  geom_vline(xintercept = c(min(baseline$baseline_end)), linetype = "dotted", color = "blue") +
  geom_vline(xintercept = c(max(baseline$baseline_end)), linetype = "dotted", color = "blue") +
  facet_grid(. ~ target_name) +
  theme_classic() +
  theme(legend.position = "none")

p2 <- ggplot(Rn, aes(x = cycle, y = delta_rn, color = well)) +
  geom_line() +
  geom_hline(yintercept = threshold, linetype = "dotted", color = "red") + 
  geom_vline(xintercept = c(min(baseline$baseline_end)), linetype = "dotted", color = "blue") +
  geom_vline(xintercept = c(max(baseline$baseline_end)), linetype = "dotted", color = "blue") +
  facet_grid(. ~ target_name) +
  scale_y_log10() +
  theme_classic() +
  theme(legend.position = "none")

p1 / p2

```

The threshold is set in the exponential phase of the amplification curve, if it is set too high or too low it will increase the standard deviation of the replicate groups.

We also want to make sure that our negative controls show little to no signal.

```{r}
#| label: fig-neg
#| fig-cap: "Levels of fluorescence detected in wells used as negative controls. Red dotted line is the threshold used to determine relative concentrations."

Rn %>%
  filter(task == "NTC") %>%
  ggplot(aes(x = cycle, y = delta_rn, color = well)) +
  geom_line() +
  geom_hline(yintercept = threshold, linetype = "dotted", color = "red") + 
  geom_vline(xintercept = c(min(baseline$baseline_end)), linetype = "dotted", color = "blue") +
  geom_vline(xintercept = c(max(baseline$baseline_end)), linetype = "dotted", color = "blue") +
  scale_y_log10() +
  theme_classic() +
  theme(legend.position = "bottom")
 
```

## Fit standard curve

The goal of performing a Standard Curve Experiment is to determine the quantity (concentration) of the target in the unknown samples. We have included a serial dilution of standards with known DNA quantities. We can fit a standard curve of threshold cycle Ct for each quantity. Then we can use that equation to calculate quantities in each unknown sample based on their respective Ct values.

We read in the information on the cycle number for which each well was detected to cross the threshold value. Now, let's plot the log quantity for each standard compared to the Ct value and add a linear regression. The PCR cycle at which the fluorescence level meets the threshold (threshold cycle Ct) should be > 8 and < 35. Ct < 8 indicates that there is too much template in the reaction, > 35 will likely lead to a higher standard deviation.


```{r}
#| label: fig-standard-curve
#| fig-cap: "Standard curve based on two technical replicates for each standard. The red dotted lines indicate the desired range for Ct."

Ct_standard <- Ct %>%
  filter(task == "STANDARD") 

ggplot(Ct_standard, aes(x = log10(quantity), y = c)) +
  geom_hline(yintercept = c(8, 35), linetype = "dotted", color = "red") +
  geom_smooth(method = "lm", color = "black", alpha = .2) +
  geom_point(shape = 21, fill = "darkorange", size = 2) +
  facet_grid(. ~ target_name) +
  labs(x = "log(quantity)", y = "Cycle threshold (Ct)") +
  theme_classic()
  
```

Let's take a look at the accuracy of our measurements.

```{r}
#| label: tbl-stand
#| tbl-cap: "Mean and standard deviation of Ct for each standard."

kable(
  Ct %>%
    filter(task == "STANDARD") %>%
    group_by(target_name, quantity) %>%
    summarize(mean_Ct = mean(c),
              sd_Ct = sd(c)) %>%
    arrange(desc(quantity))
)

```

::: {.callout-tip title="Consider this"}

How can we use our standards to determine the relative concentrations for our eDNA samples?

:::

::: {.callout-note title="Answer" collapse="true"}

That's right we need to fit a linear regression to determine the slope and R2 value. 

```{r}

df <- Ct_standard %>%
  filter(target_name == "BRK2")

# fit linear regression
score_model <- lm(c ~ log10(quantity), data = df)

# compare results
summary(score_model)

```

The R2 value (correlation coefficient) measures the goodness of fit of the regression line and the individual Ct data points, generally we are looking for R2 values > 0.95-.99.

:::

## Calculate relative concentrations

For our experiment we want to know the relative concentrations of brook trout DNA in our samples. We can do this put plugging the Ct values for each sample into the equation for our standard curve we established using genomic DNA extracted from brook trout fin clips.

$$ Concentration(ng/\mu l) = 10^{[(C_{t}-yintercept)/slope]} $$
```{r}

Ct <- Ct %>%
  mutate(rel_conc = 10^((c-score_model$coefficients[["(Intercept)"]])/score_model$coefficients[["log10(quantity)"]]))

```

Let's take a look at the calculated values for each unknown sample:

```{r}
#| label: tbl-rel-conc-samples
#| tbl-cap: "Relative concentrations of brook trout DNA (pg/ul) in eDNA samples based on standard curve using brook trout DNA."

kable(
  Ct %>%
    filter(task == "UNKNOWN") %>%
    mutate(rel_conc = rel_conc*1000) %>%
    select(-task, -quantity) %>%
    arrange(sample_name),
  digits = 2
)

```

Now that we have a processed data set that we can use for analysis, let's make sure to write it out to file so that we can access it more easily down the line.

```{r}

setup %>% 
  left_join(Ct) %>% 
  filter(task == "UNKNOWN") %>%
  rename(tube_no = sample_name) %>%
  select(tube_no, rel_conc) %>%
  replace(is.na(.), 0) %>% 
  write_delim("data/RAND_eDNA-concentrations.txt", delim = "\t")

```

